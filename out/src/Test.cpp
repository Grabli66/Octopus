// Generated by Haxe 4.0.0-preview.5+7eb789f
#include <hxcpp.h>

#ifndef INCLUDED_Test
#include <Test.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_octopus_HtmlNode
#include <octopus/HtmlNode.h>
#endif
#ifndef INCLUDED_octopus_HtmlParser
#include <octopus/HtmlParser.h>
#endif
#ifndef INCLUDED_octopus_HtmlTree
#include <octopus/HtmlTree.h>
#endif
#ifndef INCLUDED_octopus_NodeCollection
#include <octopus/NodeCollection.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df13cafffbed243f_5_main,"Test","main",0x9c6c95b5,"Test.main","Test.hx",5,0x8afb218c)

void Test_obj::__construct() { }

Dynamic Test_obj::__CreateEmpty() { return new Test_obj; }

void *Test_obj::_hx_vtable = 0;

Dynamic Test_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Test_obj > _hx_result = new Test_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Test_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37d2f472;
}

void Test_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_df13cafffbed243f_5_main)
HXLINE(   6)		::String text = HX_("<div><p>\xd0""\xa5""\xd0""\xbe""\xd1""\x80""\xd0""\xbe""\xd1""\x88""\xd0""\xbe""</p><p data-rf=\"\xd0""\x90""\xd1""\x82""\xd1""\x82""\xd1""\x80""\xd0""\xb8""\xd0""\xb1""\xd1""\x83""\xd1""\x82""\">World</p><span><p>Hello</p></span></div>",3d,d4,e6,21);
HXLINE(   8)		 ::octopus::HtmlParser htmlParser =  ::octopus::HtmlParser_obj::__alloc( HX_CTX );
HXLINE(   9)		 ::octopus::HtmlTree tree = htmlParser->parse(text);
HXLINE(  10)		 ::octopus::NodeCollection nodes = tree->findByCss(HX_("p",70,00,00,00));
HXLINE(  12)		{
HXLINE(  12)			 ::Dynamic node = nodes->iterator();
HXDLIN(  12)			while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(  12)				 ::octopus::HtmlNode node1 = ( ( ::octopus::HtmlNode)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(  13)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  13)				::String _hx_tmp1 = node1->getAttributeValue(HX_("data-rf",37,e9,bb,11));
HXDLIN(  13)				_hx_tmp(_hx_tmp1,hx::SourceInfo(HX_("test/Test.hx",8f,7f,93,a4),13,HX_("Test",72,f4,d2,37),HX_("main",39,38,56,48)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Test_obj,main,(void))


Test_obj::Test_obj()
{
}

bool Test_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Test_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Test_obj_sStaticStorageInfo = 0;
#endif

hx::Class Test_obj::__mClass;

static ::String Test_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Test_obj::__register()
{
	Test_obj _hx_dummy;
	Test_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Test",72,f4,d2,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Test_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Test_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Test_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Test_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Test_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

