// Generated by Haxe 4.0.0-preview.5+7eb789f
#include <hxcpp.h>

#ifndef INCLUDED_a524558151a8a5a0
#define INCLUDED_a524558151a8a5a0
#include "myhtml/myhtml.h"
#endif
#ifndef INCLUDED_octopus_NodeAttribute
#include <octopus/NodeAttribute.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3cd430b977e17e04_38_new,"octopus.NodeAttribute","new",0x33184dfd,"octopus.NodeAttribute.new","octopus/NodeAttribute.hx",38,0x5f981214)
HX_LOCAL_STACK_FRAME(_hx_pos_3cd430b977e17e04_18_get_value,"octopus.NodeAttribute","get_value",0x8ecbed25,"octopus.NodeAttribute.get_value","octopus/NodeAttribute.hx",18,0x5f981214)
HX_LOCAL_STACK_FRAME(_hx_pos_3cd430b977e17e04_29_fromNative,"octopus.NodeAttribute","fromNative",0x88c5eea4,"octopus.NodeAttribute.fromNative","octopus/NodeAttribute.hx",29,0x5f981214)
namespace octopus{

void NodeAttribute_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3cd430b977e17e04_38_new)
            	}

Dynamic NodeAttribute_obj::__CreateEmpty() { return new NodeAttribute_obj; }

void *NodeAttribute_obj::_hx_vtable = 0;

Dynamic NodeAttribute_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NodeAttribute_obj > _hx_result = new NodeAttribute_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NodeAttribute_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x393f931b;
}

::String NodeAttribute_obj::get_value(){
            	HX_STACKFRAME(&_hx_pos_3cd430b977e17e04_18_get_value)
HXLINE(  19)		const char* bytes = myhtml_attribute_value(this->nativeAttribute,null());
HXLINE(  20)		if (hx::IsNull( bytes )) {
HXLINE(  21)			return null();
            		}
HXLINE(  22)		return ::String(bytes);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NodeAttribute_obj,get_value,return )

 ::octopus::NodeAttribute NodeAttribute_obj::fromNative( myhtml_tree_attr_t* native){
            	HX_GC_STACKFRAME(&_hx_pos_3cd430b977e17e04_29_fromNative)
HXLINE(  30)		 ::octopus::NodeAttribute res =  ::octopus::NodeAttribute_obj::__alloc( HX_CTX );
HXLINE(  31)		res->nativeAttribute = native;
HXLINE(  32)		return res;
            	}



hx::ObjectPtr< NodeAttribute_obj > NodeAttribute_obj::__new() {
	hx::ObjectPtr< NodeAttribute_obj > __this = new NodeAttribute_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< NodeAttribute_obj > NodeAttribute_obj::__alloc(hx::Ctx *_hx_ctx) {
	NodeAttribute_obj *__this = (NodeAttribute_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NodeAttribute_obj), true, "octopus.NodeAttribute"));
	*(void **)__this = NodeAttribute_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NodeAttribute_obj::NodeAttribute_obj()
{
}

void NodeAttribute_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NodeAttribute);
	HX_MARK_MEMBER_NAME(nativeAttribute,"nativeAttribute");
	HX_MARK_END_CLASS();
}

void NodeAttribute_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nativeAttribute,"nativeAttribute");
}

hx::Val NodeAttribute_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_value() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_value") ) { return hx::Val( get_value_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void NodeAttribute_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nativeAttribute",85,1b,32,3b));
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo NodeAttribute_obj_sMemberStorageInfo[] = {
	{hx::fsUnknown /*  myhtml_tree_attr_t* */ ,(int)offsetof(NodeAttribute_obj,nativeAttribute),HX_("nativeAttribute",85,1b,32,3b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NodeAttribute_obj_sStaticStorageInfo = 0;
#endif

static ::String NodeAttribute_obj_sMemberFields[] = {
	HX_("get_value",c8,db,61,75),
	::String(null()) };

hx::Class NodeAttribute_obj::__mClass;

void NodeAttribute_obj::__register()
{
	NodeAttribute_obj _hx_dummy;
	NodeAttribute_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("octopus.NodeAttribute",8b,8b,08,35);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NodeAttribute_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NodeAttribute_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NodeAttribute_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NodeAttribute_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace octopus
