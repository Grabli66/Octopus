// Generated by Haxe 4.0.0-preview.5+7eb789f
#include <hxcpp.h>

#ifndef INCLUDED_octopus_HtmlNode
#include <octopus/HtmlNode.h>
#endif
#ifndef INCLUDED_octopus_NodeIterator
#include <octopus/NodeIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8237b115a5ea8de6_65_new,"octopus.NodeIterator","new",0x1815edd1,"octopus.NodeIterator.new","octopus/HtmlNode.hx",65,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_8237b115a5ea8de6_73_hasNext,"octopus.NodeIterator","hasNext",0xe822cf5e,"octopus.NodeIterator.hasNext","octopus/HtmlNode.hx",73,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_8237b115a5ea8de6_102_next,"octopus.NodeIterator","next",0xfb1a2a62,"octopus.NodeIterator.next","octopus/HtmlNode.hx",102,0xc7160901)
namespace octopus{

void NodeIterator_obj::__construct( ::octopus::HtmlNode root){
            	HX_STACKFRAME(&_hx_pos_8237b115a5ea8de6_65_new)
HXLINE(  66)		this->stack = ::Array_obj< ::Dynamic>::__new();
HXLINE(  67)		this->stack->push(root);
            	}

Dynamic NodeIterator_obj::__CreateEmpty() { return new NodeIterator_obj; }

void *NodeIterator_obj::_hx_vtable = 0;

Dynamic NodeIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NodeIterator_obj > _hx_result = new NodeIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NodeIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3b7ccbcf;
}

bool NodeIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_8237b115a5ea8de6_73_hasNext)
HXLINE(  74)		if (hx::IsNull( this->current )) {
HXLINE(  75)			this->current = this->stack->__get(0).StaticCast<  ::octopus::HtmlNode >();
HXLINE(  76)			return true;
            		}
HXLINE(  79)		while((this->stack->length > 0)){
HXLINE(  80)			if (hx::IsNotNull( this->current )) {
HXLINE(  81)				this->current = this->current->get_child();
HXLINE(  82)				if (hx::IsNotNull( this->current )) {
HXLINE(  83)					this->stack->push(this->current);
HXLINE(  84)					return true;
            				}
            			}
            			else {
HXLINE(  87)				this->current = this->stack->pop().StaticCast<  ::octopus::HtmlNode >()->get_next();
HXLINE(  88)				if (hx::IsNotNull( this->current )) {
HXLINE(  89)					this->stack->push(this->current);
HXLINE(  90)					return true;
            				}
            			}
            		}
HXLINE(  95)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NodeIterator_obj,hasNext,return )

 ::octopus::HtmlNode NodeIterator_obj::next(){
            	HX_STACKFRAME(&_hx_pos_8237b115a5ea8de6_102_next)
HXDLIN( 102)		return this->current;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NodeIterator_obj,next,return )


hx::ObjectPtr< NodeIterator_obj > NodeIterator_obj::__new( ::octopus::HtmlNode root) {
	hx::ObjectPtr< NodeIterator_obj > __this = new NodeIterator_obj();
	__this->__construct(root);
	return __this;
}

hx::ObjectPtr< NodeIterator_obj > NodeIterator_obj::__alloc(hx::Ctx *_hx_ctx, ::octopus::HtmlNode root) {
	NodeIterator_obj *__this = (NodeIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NodeIterator_obj), true, "octopus.NodeIterator"));
	*(void **)__this = NodeIterator_obj::_hx_vtable;
	__this->__construct(root);
	return __this;
}

NodeIterator_obj::NodeIterator_obj()
{
}

void NodeIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NodeIterator);
	HX_MARK_MEMBER_NAME(stack,"stack");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_END_CLASS();
}

void NodeIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stack,"stack");
	HX_VISIT_MEMBER_NAME(current,"current");
}

hx::Val NodeIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { return hx::Val( stack ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current ); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NodeIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"stack") ) { stack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast<  ::octopus::HtmlNode >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NodeIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("stack",48,67,0b,84));
	outFields->push(HX_("current",39,9c,e3,cb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo NodeIterator_obj_sMemberStorageInfo[] = {
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(NodeIterator_obj,stack),HX_("stack",48,67,0b,84)},
	{hx::fsObject /*  ::octopus::HtmlNode */ ,(int)offsetof(NodeIterator_obj,current),HX_("current",39,9c,e3,cb)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NodeIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String NodeIterator_obj_sMemberFields[] = {
	HX_("stack",48,67,0b,84),
	HX_("current",39,9c,e3,cb),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

hx::Class NodeIterator_obj::__mClass;

void NodeIterator_obj::__register()
{
	NodeIterator_obj _hx_dummy;
	NodeIterator_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("octopus.NodeIterator",5f,b1,9c,5b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NodeIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NodeIterator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NodeIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NodeIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace octopus
