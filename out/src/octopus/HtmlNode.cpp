// Generated by Haxe 4.0.0-preview.5+7eb789f
#include <hxcpp.h>

#ifndef INCLUDED_427a2ee8e1be4abf
#define INCLUDED_427a2ee8e1be4abf
#include "modest/finder/finder.h"
#endif
#ifndef INCLUDED_3217cbdc2bc94c8f
#define INCLUDED_3217cbdc2bc94c8f
#include "mycss/mycss.h"
#endif
#ifndef INCLUDED_84b5f5553b1ce5bb
#define INCLUDED_84b5f5553b1ce5bb
#include "mycss/selectors/init.h"
#endif
#ifndef INCLUDED_a524558151a8a5a0
#define INCLUDED_a524558151a8a5a0
#include "myhtml/myhtml.h"
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_octopus_ChildNodeIterator
#include <octopus/ChildNodeIterator.h>
#endif
#ifndef INCLUDED_octopus_HtmlNode
#include <octopus/HtmlNode.h>
#endif
#ifndef INCLUDED_octopus_HtmlTree
#include <octopus/HtmlTree.h>
#endif
#ifndef INCLUDED_octopus_NodeAttribute
#include <octopus/NodeAttribute.h>
#endif
#ifndef INCLUDED_octopus_NodeCollection
#include <octopus/NodeCollection.h>
#endif
#ifndef INCLUDED_octopus_NodeIterator
#include <octopus/NodeIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_250_new,"octopus.HtmlNode","new",0x2675d7ce,"octopus.HtmlNode.new","octopus/HtmlNode.hx",250,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_138_get_tagId,"octopus.HtmlNode","get_tagId",0xaeab0f1a,"octopus.HtmlNode.get_tagId","octopus/HtmlNode.hx",138,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_146_get_tagName,"octopus.HtmlNode","get_tagName",0xfe2cb34a,"octopus.HtmlNode.get_tagName","octopus/HtmlNode.hx",146,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_158_get_text,"octopus.HtmlNode","get_text",0xa61ad208,"octopus.HtmlNode.get_text","octopus/HtmlNode.hx",158,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_163_get_text,"octopus.HtmlNode","get_text",0xa61ad208,"octopus.HtmlNode.get_text","octopus/HtmlNode.hx",163,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_181_get_child,"octopus.HtmlNode","get_child",0xe97d53e1,"octopus.HtmlNode.get_child","octopus/HtmlNode.hx",181,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_193_get_lastChild,"octopus.HtmlNode","get_lastChild",0xaced882b,"octopus.HtmlNode.get_lastChild","octopus/HtmlNode.hx",193,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_205_get_next,"octopus.HtmlNode","get_next",0xa2238a4e,"octopus.HtmlNode.get_next","octopus/HtmlNode.hx",205,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_217_get_prev,"octopus.HtmlNode","get_prev",0xa37fc44e,"octopus.HtmlNode.get_prev","octopus/HtmlNode.hx",217,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_231_get_childs,"octopus.HtmlNode","get_childs",0x642c1172,"octopus.HtmlNode.get_childs","octopus/HtmlNode.hx",231,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_229_get_childs,"octopus.HtmlNode","get_childs",0x642c1172,"octopus.HtmlNode.get_childs","octopus/HtmlNode.hx",229,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_242_get_nodes,"octopus.HtmlNode","get_nodes",0x43826276,"octopus.HtmlNode.get_nodes","octopus/HtmlNode.hx",242,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_240_get_nodes,"octopus.HtmlNode","get_nodes",0x43826276,"octopus.HtmlNode.get_nodes","octopus/HtmlNode.hx",240,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_257_getAttributeValue,"octopus.HtmlNode","getAttributeValue",0x83f034d9,"octopus.HtmlNode.getAttributeValue","octopus/HtmlNode.hx",257,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_268_getInnerText,"octopus.HtmlNode","getInnerText",0xf2b1e4bf,"octopus.HtmlNode.getInnerText","octopus/HtmlNode.hx",268,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_278_getNodesByTagId,"octopus.HtmlNode","getNodesByTagId",0x10ad0571,"octopus.HtmlNode.getNodesByTagId","octopus/HtmlNode.hx",278,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_290_getNodesByTagName,"octopus.HtmlNode","getNodesByTagName",0x5d5a2d61,"octopus.HtmlNode.getNodesByTagName","octopus/HtmlNode.hx",290,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_298_findByCss,"octopus.HtmlNode","findByCss",0x0c846521,"octopus.HtmlNode.findByCss","octopus/HtmlNode.hx",298,0xc7160901)
HX_LOCAL_STACK_FRAME(_hx_pos_f2c4a72f45ba0ac4_126_fromNative,"octopus.HtmlNode","fromNative",0x1c4ab0f3,"octopus.HtmlNode.fromNative","octopus/HtmlNode.hx",126,0xc7160901)
namespace octopus{

void HtmlNode_obj::__construct( ::octopus::HtmlTree tree){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_250_new)
HXDLIN( 250)		this->tree = tree;
            	}

Dynamic HtmlNode_obj::__CreateEmpty() { return new HtmlNode_obj; }

void *HtmlNode_obj::_hx_vtable = 0;

Dynamic HtmlNode_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HtmlNode_obj > _hx_result = new HtmlNode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HtmlNode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x70acbb4c;
}

 myhtml_tag_id_t HtmlNode_obj::get_tagId(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_138_get_tagId)
HXDLIN( 138)		return myhtml_node_tag_id(this->nativeNode);
            	}


::String HtmlNode_obj::get_tagName(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_146_get_tagName)
HXLINE( 147)		 myhtml_tree_t* bytes = this->tree->nativeTree;
HXDLIN( 147)		const char* bytes1 = myhtml_tag_name_by_id(bytes,this->get_tagId(),null());
HXLINE( 148)		if (hx::IsNull( bytes1 )) {
HXLINE( 149)			return null();
            		}
HXLINE( 150)		return ::String(bytes1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_tagName,return )

::String HtmlNode_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_158_get_text)
HXLINE( 159)		 ::octopus::HtmlNode txtNode = null();
HXLINE( 160)		if (hx::IsEq( this->get_tagId(),MyHTML_TAG__TEXT )) {
HXLINE( 161)			txtNode = hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			bool _hx_run( ::octopus::HtmlNode x){
            				HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_163_get_text)
HXLINE( 163)				return hx::IsEq( x->get_tagId(),MyHTML_TAG__TEXT );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 163)			txtNode = ( ( ::octopus::HtmlNode)(::Lambda_obj::find(this->get_childs(), ::Dynamic(new _hx_Closure_0()))) );
            		}
HXLINE( 166)		if (hx::IsNull( txtNode )) {
HXLINE( 167)			return null();
            		}
HXLINE( 169)		const char* bytes = myhtml_node_text(txtNode->nativeNode,null());
HXLINE( 170)		if (hx::IsNull( bytes )) {
HXLINE( 171)			return null();
            		}
HXLINE( 172)		::String text = ::String(bytes);
HXLINE( 173)		return text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_text,return )

 ::octopus::HtmlNode HtmlNode_obj::get_child(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_181_get_child)
HXLINE( 182)		 myhtml_tree_node_t* native = myhtml_node_child(this->nativeNode);
HXLINE( 183)		if (hx::IsNull( native )) {
HXLINE( 184)			return null();
            		}
HXLINE( 185)		return ::octopus::HtmlNode_obj::fromNative(native,this->tree);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_child,return )

 ::octopus::HtmlNode HtmlNode_obj::get_lastChild(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_193_get_lastChild)
HXLINE( 194)		 myhtml_tree_node_t* native = myhtml_node_last_child(this->nativeNode);
HXLINE( 195)		if (hx::IsNull( native )) {
HXLINE( 196)			return null();
            		}
HXLINE( 197)		return ::octopus::HtmlNode_obj::fromNative(native,this->tree);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_lastChild,return )

 ::octopus::HtmlNode HtmlNode_obj::get_next(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_205_get_next)
HXLINE( 206)		 myhtml_tree_node_t* native = myhtml_node_next(this->nativeNode);
HXLINE( 207)		if (hx::IsNull( native )) {
HXLINE( 208)			return null();
            		}
HXLINE( 209)		return ::octopus::HtmlNode_obj::fromNative(native,this->tree);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_next,return )

 ::octopus::HtmlNode HtmlNode_obj::get_prev(){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_217_get_prev)
HXLINE( 218)		 myhtml_tree_node_t* native = myhtml_node_prev(this->nativeNode);
HXLINE( 219)		if (hx::IsNull( native )) {
HXLINE( 220)			return null();
            		}
HXLINE( 221)		return ::octopus::HtmlNode_obj::fromNative(native,this->tree);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_prev,return )

 ::Dynamic HtmlNode_obj::get_childs(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::octopus::HtmlNode,_gthis) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_231_get_childs)
HXLINE( 231)			return  ::octopus::ChildNodeIterator_obj::__alloc( HX_CTX ,_gthis);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_229_get_childs)
HXDLIN( 229)		 ::octopus::HtmlNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 230)		return  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_0(_gthis))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_childs,return )

 ::Dynamic HtmlNode_obj::get_nodes(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::octopus::HtmlNode,_gthis) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_242_get_nodes)
HXLINE( 242)			return  ::octopus::NodeIterator_obj::__alloc( HX_CTX ,_gthis);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_240_get_nodes)
HXDLIN( 240)		 ::octopus::HtmlNode _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 241)		return  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("iterator",ee,49,9a,93), ::Dynamic(new _hx_Closure_0(_gthis))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(HtmlNode_obj,get_nodes,return )

::String HtmlNode_obj::getAttributeValue(::String key){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_257_getAttributeValue)
HXLINE( 258)		const char* this1 = key.__s;
HXDLIN( 258)		 myhtml_tree_attr_t* nativeAttr = myhtml_attribute_by_key(this->nativeNode,this1,( (size_t)(key.length) ));
HXLINE( 259)		if (hx::IsNull( nativeAttr )) {
HXLINE( 260)			return null();
            		}
HXLINE( 261)		 ::octopus::NodeAttribute res = ::octopus::NodeAttribute_obj::fromNative(nativeAttr);
HXLINE( 262)		return res->get_value();
            	}


HX_DEFINE_DYNAMIC_FUNC1(HtmlNode_obj,getAttributeValue,return )

::String HtmlNode_obj::getInnerText(::String __o_delimiter){
            		::String delimiter = __o_delimiter;
            		if (hx::IsNull(__o_delimiter)) delimiter = HX_(" ",20,00,00,00);
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_268_getInnerText)
HXLINE( 269)		 ::octopus::NodeCollection nodes = this->getNodesByTagId(MyHTML_TAG__TEXT);
HXLINE( 270)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN( 270)		{
HXLINE( 270)			 ::Dynamic x = nodes->iterator();
HXDLIN( 270)			while(( (bool)(x->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 270)				 ::octopus::HtmlNode x1 = ( ( ::octopus::HtmlNode)(x->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXDLIN( 270)				_g->push(x1->get_text());
            			}
            		}
HXDLIN( 270)		return _g->join(delimiter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HtmlNode_obj,getInnerText,return )

 ::octopus::NodeCollection HtmlNode_obj::getNodesByTagId( myhtml_tag_id_t tagId){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_278_getNodesByTagId)
HXLINE( 279)		 mystatus_t* pstatus = null();
HXLINE( 280)		 myhtml_collection_t* collectionRaw = myhtml_get_nodes_by_tag_id_in_scope(this->tree->nativeTree,null(),this->nativeNode,tagId,pstatus);
HXLINE( 281)		::cpp::Pointer<  myhtml_collection_t > collection = ::cpp::Pointer_obj::fromRaw(collectionRaw);
HXLINE( 282)		::cpp::Pointer<  myhtml_collection_t > tmp = collection;
HXDLIN( 282)		return ::octopus::NodeCollection_obj::fromNative(tmp,this->tree);
            	}


 ::octopus::NodeCollection HtmlNode_obj::getNodesByTagName(::String name){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_290_getNodesByTagName)
HXLINE( 291)		 myhtml_tag_id_t tagId = this->tree->getTagIdByName(name);
HXLINE( 292)		return this->getNodesByTagId(tagId);
            	}


HX_DEFINE_DYNAMIC_FUNC1(HtmlNode_obj,getNodesByTagName,return )

 ::octopus::NodeCollection HtmlNode_obj::findByCss(::String selectors){
            	HX_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_298_findByCss)
HXLINE( 301)		 mycss_t* css = mycss_create();
HXLINE( 302)		 mystatus_t status = mycss_init(css);
HXLINE( 303)		 mycss_entry_t* entry = mycss_entry_create();
HXLINE( 304)		status = mycss_entry_init(css,entry);
HXLINE( 305)		 modest_finder_t* finder = modest_finder_create_simple();
HXLINE( 307)		 mycss_selectors_t* entrySelector = mycss_entry_selectors(entry);
HXLINE( 308)		const char* this1 = selectors.__s;
HXDLIN( 308)		 mycss_selectors_list_t* selectorsList = mycss_selectors_parse(entrySelector,MyENCODING_UTF_8,this1,( (size_t)(selectors.length) ),null());
HXLINE( 310)		 myhtml_collection_t* collection = null();
HXLINE( 311)		 myhtml_collection_t** collectionAddr = &(collection);
HXLINE( 312)		modest_finder_by_selectors_list(finder,this->nativeNode,selectorsList,collectionAddr);
HXLINE( 313)		::cpp::Pointer<  myhtml_collection_t > nativeCollection = ::cpp::Pointer_obj::fromRaw(collection);
HXLINE( 314)		::cpp::Pointer<  myhtml_collection_t > tmp = nativeCollection;
HXDLIN( 314)		 ::octopus::NodeCollection res = ::octopus::NodeCollection_obj::fromNative(tmp,this->tree);
HXLINE( 316)		mycss_selectors_list_destroy(entrySelector,selectorsList,true);
HXLINE( 317)		modest_finder_destroy(finder,true);
HXLINE( 318)		mycss_entry_destroy(entry,true);
HXLINE( 319)		mycss_destroy(css,true);
HXLINE( 321)		return res;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HtmlNode_obj,findByCss,return )

 ::octopus::HtmlNode HtmlNode_obj::fromNative( myhtml_tree_node_t* native, ::octopus::HtmlTree tree){
            	HX_GC_STACKFRAME(&_hx_pos_f2c4a72f45ba0ac4_126_fromNative)
HXLINE( 127)		 ::octopus::HtmlNode res =  ::octopus::HtmlNode_obj::__alloc( HX_CTX ,tree);
HXLINE( 128)		res->nativeNode = native;
HXLINE( 129)		return res;
            	}



hx::ObjectPtr< HtmlNode_obj > HtmlNode_obj::__new( ::octopus::HtmlTree tree) {
	hx::ObjectPtr< HtmlNode_obj > __this = new HtmlNode_obj();
	__this->__construct(tree);
	return __this;
}

hx::ObjectPtr< HtmlNode_obj > HtmlNode_obj::__alloc(hx::Ctx *_hx_ctx, ::octopus::HtmlTree tree) {
	HtmlNode_obj *__this = (HtmlNode_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(HtmlNode_obj), true, "octopus.HtmlNode"));
	*(void **)__this = HtmlNode_obj::_hx_vtable;
	__this->__construct(tree);
	return __this;
}

HtmlNode_obj::HtmlNode_obj()
{
}

void HtmlNode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HtmlNode);
	HX_MARK_MEMBER_NAME(nativeNode,"nativeNode");
	HX_MARK_MEMBER_NAME(tree,"tree");
	HX_MARK_END_CLASS();
}

void HtmlNode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nativeNode,"nativeNode");
	HX_VISIT_MEMBER_NAME(tree,"tree");
}

hx::Val HtmlNode_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tree") ) { return hx::Val( tree ); }
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_text() ); }
		if (HX_FIELD_EQ(inName,"next") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_next() ); }
		if (HX_FIELD_EQ(inName,"prev") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_prev() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"child") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_child() ); }
		if (HX_FIELD_EQ(inName,"nodes") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_nodes() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"childs") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_childs() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tagName") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tagName() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_next") ) { return hx::Val( get_next_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_prev") ) { return hx::Val( get_prev_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_child") ) { return hx::Val( get_child_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastChild") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_lastChild() ); }
		if (HX_FIELD_EQ(inName,"get_nodes") ) { return hx::Val( get_nodes_dyn() ); }
		if (HX_FIELD_EQ(inName,"findByCss") ) { return hx::Val( findByCss_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_childs") ) { return hx::Val( get_childs_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_tagName") ) { return hx::Val( get_tagName_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getInnerText") ) { return hx::Val( getInnerText_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_lastChild") ) { return hx::Val( get_lastChild_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getAttributeValue") ) { return hx::Val( getAttributeValue_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNodesByTagName") ) { return hx::Val( getNodesByTagName_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HtmlNode_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"tree") ) { tree=inValue.Cast<  ::octopus::HtmlTree >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HtmlNode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nativeNode",39,17,1a,10));
	outFields->push(HX_("tree",5e,99,03,4d));
	outFields->push(HX_("tagId",d5,64,e7,0a));
	outFields->push(HX_("tagName",c5,2d,76,22));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("child",9c,a9,b9,45));
	outFields->push(HX_("lastChild",66,d7,66,92));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("prev",f3,be,5e,4a));
	outFields->push(HX_("childs",57,bf,ba,bc));
	outFields->push(HX_("nodes",31,b8,be,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo HtmlNode_obj_sMemberStorageInfo[] = {
	{hx::fsUnknown /*  myhtml_tree_node_t* */ ,(int)offsetof(HtmlNode_obj,nativeNode),HX_("nativeNode",39,17,1a,10)},
	{hx::fsObject /*  ::octopus::HtmlTree */ ,(int)offsetof(HtmlNode_obj,tree),HX_("tree",5e,99,03,4d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *HtmlNode_obj_sStaticStorageInfo = 0;
#endif

static ::String HtmlNode_obj_sMemberFields[] = {
	HX_("tree",5e,99,03,4d),
	HX_("get_tagName",dc,8d,70,a8),
	HX_("get_text",36,88,b4,cc),
	HX_("get_child",f3,05,63,89),
	HX_("get_lastChild",3d,ab,ca,53),
	HX_("get_next",7c,40,bd,c8),
	HX_("get_prev",7c,7a,19,ca),
	HX_("get_childs",20,2f,42,ad),
	HX_("get_nodes",88,14,68,e3),
	HX_("getAttributeValue",eb,48,d1,c0),
	HX_("getInnerText",ed,49,cd,43),
	HX_("getNodesByTagName",73,41,3b,9a),
	HX_("findByCss",33,17,6a,ac),
	::String(null()) };

hx::Class HtmlNode_obj::__mClass;

void HtmlNode_obj::__register()
{
	HtmlNode_obj _hx_dummy;
	HtmlNode_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("octopus.HtmlNode",dc,98,66,48);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HtmlNode_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HtmlNode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HtmlNode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HtmlNode_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace octopus
